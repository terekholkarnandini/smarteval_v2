{"version":3,"file":"index.cjs","sources":["../../src/geometry/Shape.ts","../../src/geometry/Point.ts","../../src/geometry/Line.ts","../../src/geometry/TableData.ts","../../src/geometry/Table.ts","../../src/geometry/LineStore.ts","../../src/geometry/Rectangle.ts","../../src/ImageResult.ts","../../src/PathGeometry.ts","../../src/TextResult.ts","../../src/PDFParse.ts","../../src/index.ts"],"sourcesContent":["export abstract class Shape {\n    static tolerance = 2;\n    public abstract transform(matrix: Array<number>): this\n\n    static applyTransform(p:Array<number>, m:Array<number>):Array<number> {\n        const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n        const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n        return [xt, yt];\n    }\n}","import { Shape } from './Shape.js';\n\nexport class Point extends Shape {\n\tpublic x: number;\n\tpublic y: number;\n\n\tconstructor(x: number, y: number) {\n\t\tsuper();\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic equal(point: Point): boolean {\n\t\treturn point.x === this.x && point.y === this.y;\n\t}\n\n\tpublic transform(matrix: Array<number>): this {\n\t\tconst p = Shape.applyTransform([this.x, this.y], matrix);\n\t\tthis.x = p[0];\n\t\tthis.y = p[1];\n\t\treturn this;\n\t}\n}\n","import { Point } from './Point.js';\nimport { Shape } from './Shape.js';\n\nexport enum LineDirection {\n\tNone = 0,\n\tHorizontal = 1,\n\tVertical,\n}\n\nexport class Line extends Shape {\n\tpublic from: Point;\n\tpublic to: Point;\n\tpublic direction: LineDirection = LineDirection.None;\n\tpublic length: number = 0;\n\tpublic intersections: Array<Point> = [];\n\tpublic gaps: Array<Line> = [];\n\n\tconstructor(from: Point, to: Point) {\n\t\tsuper();\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\t\tlet from = this.from;\n\t\tlet to = this.to;\n\n\t\tif (Math.abs(from.y - to.y) < Shape.tolerance) {\n\t\t\tthis.direction = LineDirection.Horizontal;\n\t\t\tto.y = from.y;\n\t\t\tif (from.x > to.x) {\n\t\t\t\tconst temp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = temp;\n\t\t\t}\n\t\t\tthis.length = to.x - from.x;\n\t\t} else if (Math.abs(from.x - to.x) < Shape.tolerance) {\n\t\t\tthis.direction = LineDirection.Vertical;\n\t\t\tto.x = from.x;\n\t\t\tif (from.y > to.y) {\n\t\t\t\tconst temp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = temp;\n\t\t\t}\n\t\t\tthis.length = to.y - from.y;\n\t\t}\n\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\tprivate _valid: boolean | undefined = undefined;\n\n\tget valid(): boolean {\n\t\tif (this._valid === undefined) {\n\t\t\tthis._valid = this.direction !== LineDirection.None && this.length > Shape.tolerance;\n\t\t}\n\t\treturn this._valid;\n\t}\n\n\tget normalized(): Line {\n\t\tif (this.direction === LineDirection.Horizontal) {\n\t\t\treturn new Line(new Point(this.from.x - Shape.tolerance, this.from.y), new Point(this.to.x + Shape.tolerance, this.from.y));\n\t\t} else if (this.direction === LineDirection.Vertical) {\n\t\t\treturn new Line(new Point(this.from.x, this.from.y - Shape.tolerance), new Point(this.from.x, this.to.y + Shape.tolerance));\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic addGap(line: Line): void {\n\t\tthis.gaps.push(line);\n\t}\n\n\tpublic containsPoint(p: Point): boolean {\n\t\tif (this.direction === LineDirection.Vertical) {\n\t\t\treturn this.from.x === p.x && p.y >= this.from.y && p.y <= this.to.y;\n\t\t} else if (this.direction === LineDirection.Horizontal) {\n\t\t\treturn this.from.y === p.y && p.x >= this.from.x && p.x <= this.to.x;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// // todo implement\n\t// public containsLine(l:Line):boolean{\n\t//     if(this.direction === LineDirection.Vertical && l.direction === LineDirection.Vertical){\n\t//         return this.from.x === l.from.x\n\t//     }\n\t//     else if(this.direction === LineDirection.Horizontal && l.direction === LineDirection.Horizontal){\n\t//         return this.from.y === l.from.y\n\t//     }\n\t//     return false\n\t// }\n\n\tpublic addIntersectionPoint(point: Point): void {\n\t\tfor (const intPoint of this.intersections) {\n\t\t\tif (intPoint.equal(point)) return;\n\t\t}\n\t\tthis.intersections.push(point);\n\t}\n\n\tpublic intersection(line: Line): Point | undefined {\n\t\tlet result: Point | undefined;\n\n\t\tif (!this.valid || !line.valid) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst thisNormalized = this.normalized;\n\t\tconst lineNormalized = line.normalized;\n\n\t\tif (this.direction === LineDirection.Horizontal && line.direction === LineDirection.Vertical) {\n\t\t\tconst x = lineNormalized.from.x;\n\t\t\tconst y = thisNormalized.from.y;\n\t\t\tconst isOk = x > thisNormalized.from.x && x < thisNormalized.to.x && y > lineNormalized.from.y && y < lineNormalized.to.y;\n\n\t\t\tif (isOk) {\n\t\t\t\tconst intPoint = new Point(x, y);\n\t\t\t\tthis.addIntersectionPoint(intPoint);\n\t\t\t\tline.addIntersectionPoint(intPoint);\n\t\t\t\tresult = intPoint;\n\t\t\t}\n\t\t} else if (this.direction === LineDirection.Vertical && line.direction === LineDirection.Horizontal) {\n\t\t\tconst x = thisNormalized.from.x;\n\t\t\tconst y = lineNormalized.from.y;\n\t\t\tconst isOk = x > lineNormalized.from.x && x < lineNormalized.to.x && y > thisNormalized.from.y && y < thisNormalized.to.y;\n\n\t\t\tif (isOk) {\n\t\t\t\tconst intPoint = new Point(x, y);\n\t\t\t\tthis.addIntersectionPoint(intPoint);\n\t\t\t\tline.addIntersectionPoint(intPoint);\n\t\t\t\tresult = intPoint;\n\t\t\t}\n\t\t}\n\n\t\t// if(result){\n\t\t//     for (const gapLine of this.gaps) {\n\t\t//         if(gapLine.containsPoint(result)) return undefined\n\t\t//     }\n\t\t//\n\t\t//     for (const gapLine of line.gaps) {\n\t\t//         if(gapLine.containsPoint(result)) return undefined\n\t\t//     }\n\t\t// }\n\n\t\treturn result;\n\t}\n\n\tpublic transform(matrix: Array<number>): this {\n\t\tconst p1 = this.from.transform(matrix);\n\t\tconst p2 = this.to.transform(matrix);\n\n\t\tconst x = Math.min(p1.x, p2.x);\n\t\tconst y = Math.min(p1.y, p2.y);\n\n\t\tconst width = Math.abs(p1.x - p2.x);\n\t\tconst height = Math.abs(p1.y - p2.y);\n\n\t\tthis.from = new Point(x, y);\n\t\tthis.to = new Point(x + width, y + height);\n\t\tthis.init();\n\t\treturn this;\n\t}\n}\n","import type { Point } from './Point.js';\n\nexport type TableCell = {\n\tminXY: Point;\n\tmaxXY: Point;\n\twidth: number;\n\theight: number;\n\tcolspan?: number;\n\trowspan?: number;\n\ttext: Array<string>;\n};\n\nexport type TableRow = Array<TableCell>;\n\nexport class TableData {\n\tpublic minXY: Point;\n\tpublic maxXY: Point;\n\tpublic rows: Array<TableRow>;\n\tprivate rowPivots: Array<number>;\n\tprivate colPivots: Array<number>;\n\n\tconstructor(minXY: Point, maxXY: Point, rowPivots: Array<number>, colPivots: Array<number>) {\n\t\tthis.minXY = minXY;\n\t\tthis.maxXY = maxXY;\n\t\tthis.rows = [];\n\t\tthis.rowPivots = rowPivots;\n\t\tthis.colPivots = colPivots;\n\t}\n\n\tpublic findCell(x: number, y: number): TableCell | undefined {\n\t\tif (x >= this.minXY.x && y >= this.minXY.y && x <= this.maxXY.x && y <= this.maxXY.y) {\n\t\t\tfor (const row of this.rows) {\n\t\t\t\tfor (const cell of row) {\n\t\t\t\t\tif (cell.minXY.x <= x && cell.minXY.y <= y && cell.maxXY.x >= x && cell.maxXY.y >= y) {\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic get cellCount() {\n\t\treturn this.rows.reduce((acc, row) => acc + row.length, 0);\n\t}\n\n\tpublic get rowCount() {\n\t\treturn this.rows.length;\n\t}\n\n\tpublic check(): boolean {\n\t\t// const cellCounts:Array<number> = []\n\t\t//\n\t\t// for (const row of this.rows) {\n\t\t//     let cellNum = 0\n\t\t//     for (const cell of row) {\n\t\t//         cellNum += cell.colspan || 1\n\t\t//     }\n\t\t//     cellCounts.push(cellNum)\n\t\t// }\n\t\t//\n\t\t// for (let i = 1; i < cellCounts.length; i++) {\n\t\t//     if (cellCounts[i] !== cellCounts[i - 1]) {\n\t\t//         return false\n\t\t//     }\n\t\t// }\n\n\t\tconst virtualCellCount = (this.colPivots.length - 1) * (this.rowPivots.length - 1);\n\t\tlet allCellCount = 0;\n\n\t\tfor (const row of this.rows) {\n\t\t\tfor (const cell of row) {\n\t\t\t\tconst count = (cell.colspan || 1) * (cell.rowspan || 1);\n\t\t\t\tallCellCount += count;\n\t\t\t}\n\t\t}\n\n\t\tif (virtualCellCount !== allCellCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic toArray(): string[][] {\n\t\tconst tableArr: string[][] = [];\n\t\tfor (const row of this.rows) {\n\t\t\tconst rowArr: string[] = [];\n\t\t\tfor (const cell of row) {\n\t\t\t\tlet text = cell.text.join('');\n\t\t\t\ttext = text.replace(/^[\\s]+|[\\s]+$/g, '');\n\t\t\t\ttext = text.trim();\n\t\t\t\trowArr.push(text);\n\t\t\t}\n\t\t\ttableArr.push(rowArr);\n\t\t}\n\t\treturn tableArr;\n\t}\n}\n","import { Line, LineDirection } from './Line.js';\nimport { Point } from './Point.js';\nimport { Shape } from './Shape.js';\nimport { type TableCell, TableData, type TableRow } from './TableData.js';\n\nexport class Table {\n\tpublic hLines: Array<Line> = [];\n\tpublic vLines: Array<Line> = [];\n\n\tconstructor(line: Line) {\n\t\tif (line.direction === LineDirection.Horizontal) {\n\t\t\tthis.hLines.push(line);\n\t\t} else if (line.direction === LineDirection.Vertical) {\n\t\t\tthis.vLines.push(line);\n\t\t}\n\t}\n\n\tpublic get isValid(): boolean {\n\t\treturn this.hLines.length + this.vLines.length > 4;\n\t}\n\n\tpublic get rowPivots(): Array<number> {\n\t\tconst rowSet: Set<number> = new Set();\n\n\t\tfor (const line of this.hLines) {\n\t\t\trowSet.add(line.from.y);\n\t\t}\n\n\t\treturn [...rowSet].sort((a, b) => a - b);\n\t}\n\n\tpublic get colPivots(): Array<number> {\n\t\tconst colSet: Set<number> = new Set();\n\n\t\tfor (const line of this.vLines) {\n\t\t\tcolSet.add(line.from.x);\n\t\t}\n\n\t\treturn [...colSet].sort((a, b) => a - b);\n\t}\n\n\tpublic add(line: Line): boolean {\n\t\tconst hasIntersection = this.intersection(line);\n\n\t\tif (hasIntersection) {\n\t\t\tif (line.direction === LineDirection.Horizontal) {\n\t\t\t\tthis.hLines.push(line);\n\t\t\t\treturn true;\n\t\t\t} else if (line.direction === LineDirection.Vertical) {\n\t\t\t\tthis.vLines.push(line);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate intersection(line: Line): boolean {\n\t\tlet flag = false;\n\t\tif (!line.valid) return flag;\n\n\t\tif (line.direction === LineDirection.Horizontal) {\n\t\t\tfor (const vLine of this.vLines) {\n\t\t\t\tconst p = line.intersection(vLine);\n\t\t\t\tif (p) {\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (line.direction === LineDirection.Vertical) {\n\t\t\tfor (const hLine of this.hLines) {\n\t\t\t\tconst p = line.intersection(hLine);\n\t\t\t\tif (p) {\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn flag;\n\t}\n\n\tprivate getSameHorizontal(line: Line): Array<Line> {\n\t\tconst same: Array<Line> = [line];\n\t\tconst other: Array<Line> = [];\n\n\t\twhile (this.hLines.length > 0) {\n\t\t\tconst hLine = this.hLines.shift();\n\t\t\tif (!hLine) continue;\n\n\t\t\tif (hLine.from.y === line.from.y) {\n\t\t\t\tsame.push(hLine);\n\t\t\t} else {\n\t\t\t\tother.push(hLine);\n\t\t\t}\n\t\t}\n\n\t\tthis.hLines = other;\n\t\treturn same;\n\t}\n\n\tprivate getSameVertical(line: Line): Array<Line> {\n\t\tconst same: Array<Line> = [line];\n\t\tconst other: Array<Line> = [];\n\n\t\twhile (this.vLines.length > 0) {\n\t\t\tconst vLine = this.vLines.shift();\n\t\t\tif (!vLine) continue;\n\n\t\t\tif (vLine.from.x === line.from.x) {\n\t\t\t\tsame.push(vLine);\n\t\t\t} else {\n\t\t\t\tother.push(vLine);\n\t\t\t}\n\t\t}\n\n\t\tthis.vLines = other;\n\t\treturn same;\n\t}\n\n\tprivate mergeHorizontalLines(lines: Array<Line>): Line {\n\t\tlines.sort((l1, l2) => l1.from.x - l2.from.x);\n\n\t\tconst minX = lines[0].from.x;\n\t\tconst maxX = lines[lines.length - 1].to.x;\n\n\t\tconst resultLine = new Line(new Point(minX, lines[0].from.y), new Point(maxX, lines[0].from.y));\n\n\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\tconst prevLine = lines[i - 1];\n\t\t\tconst currLine = lines[i];\n\n\t\t\tif (Math.abs(prevLine.to.x - currLine.from.x) > Shape.tolerance) {\n\t\t\t\tconst gapLine = new Line(new Point(prevLine.to.x, prevLine.from.y), new Point(currLine.from.x, currLine.from.y));\n\t\t\t\tresultLine.addGap(gapLine);\n\t\t\t}\n\t\t}\n\n\t\treturn resultLine;\n\t}\n\n\tprivate mergeVerticalLines(lines: Array<Line>): Line {\n\t\tlines.sort((l1, l2) => l1.from.y - l2.from.y);\n\n\t\tconst minY = lines[0].from.y;\n\t\tconst maxY = lines[lines.length - 1].to.y;\n\n\t\tconst resultLine = new Line(new Point(lines[0].from.x, minY), new Point(lines[0].from.x, maxY));\n\n\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\tconst prevLine = lines[i - 1];\n\t\t\tconst currLine = lines[i];\n\n\t\t\tif (Math.abs(prevLine.to.y - currLine.from.y) > Shape.tolerance) {\n\t\t\t\tconst gapLine = new Line(new Point(prevLine.to.x, prevLine.to.y), new Point(prevLine.to.x, currLine.from.y));\n\t\t\t\tresultLine.addGap(gapLine);\n\t\t\t}\n\t\t}\n\n\t\treturn resultLine;\n\t}\n\n\tpublic normalize(): void {\n\t\tthis.hLines = this.hLines.filter((l) => l.intersections.length > 1);\n\t\tthis.vLines = this.vLines.filter((l) => l.intersections.length > 1);\n\n\t\tthis.hLines.sort((l1, l2) => l1.from.y - l2.from.y);\n\t\tthis.vLines.sort((l1, l2) => l1.from.x - l2.from.x);\n\n\t\tconst newHLines: Array<Line> = [];\n\n\t\twhile (this.hLines.length > 0) {\n\t\t\tconst line = this.hLines.shift();\n\t\t\tif (!line) continue;\n\n\t\t\tconst lines = this.getSameHorizontal(line);\n\t\t\tconst merged = this.mergeHorizontalLines(lines);\n\t\t\tnewHLines.push(merged);\n\t\t}\n\n\t\tthis.hLines = newHLines;\n\n\t\tconst newVLines: Array<Line> = [];\n\n\t\twhile (this.vLines.length > 0) {\n\t\t\tconst line = this.vLines.shift();\n\t\t\tif (!line) continue;\n\n\t\t\tconst lines = this.getSameVertical(line);\n\t\t\tconst merged = this.mergeVerticalLines(lines);\n\t\t\tnewVLines.push(merged);\n\t\t}\n\n\t\tthis.vLines = newVLines;\n\t}\n\n\tpublic verticalExists(line: Line, y1: number, y2: number): boolean {\n\t\tif (line.direction !== LineDirection.Vertical) {\n\t\t\tthrow new Error('Line is not vertical');\n\t\t}\n\n\t\tif (y1 >= y2) {\n\t\t\tthrow new Error('y1 must be less than y2');\n\t\t}\n\n\t\tif (line.from.y <= y1 && line.to.y >= y2) {\n\t\t\tfor (const gap of line.gaps) {\n\t\t\t\tif (gap.from.y <= y1 && gap.to.y >= y2) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic horizontalExists(line: Line, x1: number, x2: number): boolean {\n\t\tif (line.direction !== LineDirection.Horizontal) {\n\t\t\tthrow new Error('Line is not horizontal');\n\t\t}\n\n\t\tif (x1 >= x2) {\n\t\t\tthrow new Error('x1 must be less than x2');\n\t\t}\n\n\t\tif (line.from.x <= x1 && line.to.x >= x2) {\n\t\t\tfor (const gap of line.gaps) {\n\t\t\t\tif (gap.from.x <= x1 && gap.to.x >= x2) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate findBottomLineIndex(h2Index: number, xMiddle: number): number {\n\t\tfor (let i = h2Index; i < this.hLines.length; i++) {\n\t\t\tconst hLine = this.hLines[i];\n\t\t\tif (hLine.from.x <= xMiddle && hLine.to.x >= xMiddle) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate findVerticalLineIndexs(topHLine: Line, yMiddle: number): Array<number> {\n\t\tconst result: Array<number> = [];\n\n\t\tfor (let i = 0; i < this.vLines.length; i++) {\n\t\t\tconst vLine = this.vLines[i];\n\t\t\tif (vLine.from.y <= yMiddle && vLine.to.y >= yMiddle && topHLine.intersection(vLine)) {\n\t\t\t\tresult.push(i);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getRow(h1Index: number, h2Index: number, yMiddle: number): TableRow {\n\t\tconst tableRow: TableRow = [];\n\t\t//const colCount = this.vLines.length -1\n\t\tconst topHLine = this.hLines[h1Index];\n\t\tconst vLineIndexes = this.findVerticalLineIndexs(topHLine, yMiddle);\n\n\t\tfor (let i = 1; i < vLineIndexes.length; i++) {\n\t\t\tconst leftVLine = this.vLines[vLineIndexes[i - 1]];\n\t\t\tconst rightVLine = this.vLines[vLineIndexes[i]];\n\t\t\tconst xMiddle = (leftVLine.from.x + rightVLine.from.x) / 2;\n\t\t\tconst bottomHLineIndex = this.findBottomLineIndex(h2Index, xMiddle);\n\t\t\tconst bottomHLine = this.hLines[bottomHLineIndex];\n\t\t\t// minXY: {x:leftVLine.from.x,y:topHLine.from.y},\n\t\t\t// maxXY: {x:rightVLine.from.x,y:bottomHLine.from.y},\n\t\t\tconst tableCell: TableCell = {\n\t\t\t\tminXY: new Point(leftVLine.from.x, topHLine.from.y),\n\t\t\t\tmaxXY: new Point(rightVLine.from.x, bottomHLine.from.y),\n\t\t\t\twidth: rightVLine.from.x - leftVLine.from.x,\n\t\t\t\theight: bottomHLine.from.y - topHLine.from.y,\n\t\t\t\ttext: [],\n\t\t\t};\n\t\t\tconst colSpan = vLineIndexes[i] - vLineIndexes[i - 1];\n\t\t\tconst rowSpan = bottomHLineIndex - h1Index;\n\n\t\t\tif (colSpan > 1) {\n\t\t\t\ttableCell.colspan = colSpan;\n\t\t\t}\n\t\t\tif (rowSpan > 1) {\n\t\t\t\ttableCell.rowspan = rowSpan;\n\t\t\t}\n\n\t\t\ttableRow.push(tableCell);\n\t\t}\n\n\t\treturn tableRow;\n\t}\n\n\tpublic toData(): TableData {\n\t\tconst rowPivots = this.rowPivots;\n\t\tconst colPivots = this.colPivots;\n\n\t\tconst minXY = new Point(colPivots[0], rowPivots[0]);\n\t\tconst maxXY = new Point(colPivots[colPivots.length - 1], rowPivots[rowPivots.length - 1]);\n\n\t\tconst result: TableData = new TableData(minXY, maxXY, rowPivots, colPivots);\n\n\t\tfor (let h1 = 1; h1 < this.hLines.length; h1++) {\n\t\t\tconst prevHLine = this.hLines[h1 - 1];\n\t\t\tconst currHLine = this.hLines[h1];\n\t\t\tconst YMiddle = (prevHLine.from.y + currHLine.from.y) / 2;\n\t\t\tconst rowData = this.getRow(h1 - 1, h1, YMiddle);\n\t\t\tresult.rows.push(rowData);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import { Line, LineDirection } from './Line.js';\nimport { Point } from './Point.js';\nimport type { Rectangle } from './Rectangle.js';\nimport { Shape } from './Shape.js';\nimport { Table } from './Table.js';\nimport type { TableData } from './TableData.js';\n\nexport class LineStore {\n\tpublic hLines: Array<Line> = [];\n\tpublic vLines: Array<Line> = [];\n\n\tpublic add(line: Line): void {\n\t\tif (line.valid) {\n\t\t\tif (line.direction === LineDirection.Horizontal) {\n\t\t\t\tthis.hLines.push(line);\n\t\t\t} else if (line.direction === LineDirection.Vertical) {\n\t\t\t\tthis.vLines.push(line);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic addRectangle(rect: Rectangle): void {\n\t\tfor (const line of rect.getLines()) {\n\t\t\tthis.add(line);\n\t\t}\n\t}\n\n\tpublic getTableData(): Array<TableData> {\n\t\tconst result: Array<TableData> = [];\n\n\t\tconst tables = this.getTables();\n\n\t\tfor (const table of tables) {\n\t\t\tconst data = table.toData();\n\t\t\tif (data) {\n\t\t\t\tresult.push(data);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getTables(): Array<Table> {\n\t\tconst result: Array<Table> = [];\n\n\t\twhile (this.hLines.length !== 0) {\n\t\t\tconst hLine = this.hLines.shift();\n\t\t\tif (!hLine) continue;\n\n\t\t\tconst filled = this.tryFill(result, hLine);\n\t\t\tif (filled) continue;\n\n\t\t\tconst table = new Table(hLine);\n\t\t\tthis.fillTable(table);\n\t\t\tresult.push(table);\n\t\t}\n\n\t\twhile (this.vLines.length !== 0) {\n\t\t\tconst vLine = this.vLines.shift();\n\t\t\tif (!vLine) continue;\n\n\t\t\tconst filled = this.tryFill(result, vLine);\n\t\t\tif (filled) continue;\n\n\t\t\tconst table = new Table(vLine);\n\t\t\tthis.fillTable(table);\n\t\t\tresult.push(table);\n\t\t}\n\n\t\tconst validTables = result.filter((t) => t.isValid);\n\n\t\tfor (const table of validTables) {\n\t\t\ttable.normalize();\n\t\t}\n\n\t\treturn validTables;\n\t}\n\n\tpublic normalize(): void {\n\t\tthis.normalizeHorizontal();\n\t\tthis.normalizeVertical();\n\t}\n\n\tpublic normalizeHorizontal() {\n\t\tthis.hLines.sort((l1, l2) => l1.from.y - l2.from.y);\n\n\t\tconst newLines: Array<Line> = [];\n\n\t\tlet sameY: Array<Line> = [];\n\t\tfor (const line of this.hLines) {\n\t\t\tif (sameY.length === 0) {\n\t\t\t\tsameY.push(line);\n\t\t\t} else if (Math.abs(sameY[0]?.from.y - line.from.y) < Shape.tolerance) {\n\t\t\t\tsameY.push(line);\n\t\t\t} else {\n\t\t\t\tconst merged = this.margeHorizontalLines(sameY);\n\t\t\t\tnewLines.push(...merged);\n\t\t\t\tsameY = [line];\n\t\t\t}\n\t\t}\n\n\t\tif (sameY.length > 0) {\n\t\t\tconst merged = this.margeHorizontalLines(sameY);\n\t\t\tnewLines.push(...merged);\n\t\t}\n\n\t\tthis.hLines = newLines;\n\t}\n\n\tpublic normalizeVertical() {\n\t\tthis.vLines.sort((l1, l2) => l1.from.x - l2.from.x);\n\n\t\tconst newLines: Array<Line> = [];\n\n\t\tlet sameX: Array<Line> = [];\n\t\tfor (const line of this.vLines) {\n\t\t\tif (sameX.length === 0) {\n\t\t\t\tsameX.push(line);\n\t\t\t} else if (Math.abs(sameX[0]?.from.x - line.from.x) < Shape.tolerance) {\n\t\t\t\tsameX.push(line);\n\t\t\t} else {\n\t\t\t\tconst merged = this.margeVerticalLines(sameX);\n\t\t\t\tnewLines.push(...merged);\n\t\t\t\tsameX = [line];\n\t\t\t}\n\t\t}\n\n\t\tif (sameX.length > 0) {\n\t\t\tconst merged = this.margeVerticalLines(sameX);\n\t\t\tnewLines.push(...merged);\n\t\t}\n\n\t\tthis.vLines = newLines;\n\t}\n\n\tprivate fillTable(table: Table): void {\n\t\tconst newVLines: Array<Line> = [];\n\t\tconst newHLines: Array<Line> = [];\n\n\t\tfor (const vLine of this.vLines) {\n\t\t\tif (!table.add(vLine)) {\n\t\t\t\tnewVLines.push(vLine);\n\t\t\t}\n\t\t}\n\n\t\tfor (const hLine of this.hLines) {\n\t\t\tif (!table.add(hLine)) {\n\t\t\t\tnewHLines.push(hLine);\n\t\t\t}\n\t\t}\n\n\t\tthis.hLines = newHLines;\n\t\tthis.vLines = newVLines;\n\t}\n\n\tprivate tryFill(tables: Array<Table>, line: Line): boolean {\n\t\tfor (const table of tables) {\n\t\t\tif (table.add(line)) {\n\t\t\t\tthis.fillTable(table);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate margeHorizontalLines(sameYLines: Array<Line>): Array<Line> {\n\t\tconst result: Array<Line> = [];\n\t\tsameYLines.sort((l1, l2) => l1.from.x - l2.from.x);\n\n\t\tconst sameY = sameYLines[0]?.from.y;\n\t\tif (sameY === undefined) return result;\n\n\t\tlet minX: number = Number.MAX_SAFE_INTEGER;\n\t\tlet maxX: number = Number.MIN_SAFE_INTEGER;\n\n\t\tfor (const line of sameYLines) {\n\t\t\tif (line.from.x - maxX < Shape.tolerance) {\n\t\t\t\tif (line.from.x < minX) {\n\t\t\t\t\tminX = line.from.x;\n\t\t\t\t}\n\t\t\t\tif (line.to.x > maxX) {\n\t\t\t\t\tmaxX = line.to.x;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (maxX > minX) {\n\t\t\t\t\tresult.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));\n\t\t\t\t}\n\t\t\t\tminX = line.from.x;\n\t\t\t\tmaxX = line.to.x;\n\t\t\t}\n\t\t}\n\n\t\tconst last = result[result.length - 1];\n\n\t\tif (last) {\n\t\t\tif (last.from.x !== minX && last.to.x !== maxX) {\n\t\t\t\tresult.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate margeVerticalLines(sameXLines: Array<Line>): Array<Line> {\n\t\tconst result: Array<Line> = [];\n\t\tsameXLines.sort((l1, l2) => l1.from.y - l2.from.y);\n\n\t\tconst sameX = sameXLines[0]?.from.x;\n\t\tif (sameX === undefined) return result;\n\n\t\tlet minY: number = Number.MAX_SAFE_INTEGER;\n\t\tlet maxY: number = Number.MIN_SAFE_INTEGER;\n\n\t\tfor (const line of sameXLines) {\n\t\t\tif (line.from.y - maxY < Shape.tolerance) {\n\t\t\t\tif (line.from.y < minY) {\n\t\t\t\t\tminY = line.from.y;\n\t\t\t\t}\n\t\t\t\tif (line.to.y > maxY) {\n\t\t\t\t\tmaxY = line.to.y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (maxY > minY) {\n\t\t\t\t\tresult.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));\n\t\t\t\t}\n\t\t\t\tminY = line.from.y;\n\t\t\t\tmaxY = line.to.y;\n\t\t\t}\n\t\t}\n\n\t\tconst last = result[result.length - 1];\n\n\t\tif (last) {\n\t\t\tif (last.from.y !== minY && last.to.y !== maxY) {\n\t\t\t\tresult.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import { Line } from './Line.js';\nimport { Point } from './Point.js';\nimport { Shape } from './Shape.js';\n\nexport class Rectangle extends Shape {\n\tpublic from: Point;\n\tpublic width: number;\n\tpublic height: number;\n\n\tconstructor(from: Point, width: number, height: number) {\n\t\tsuper();\n\t\tthis.from = from;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic get to(): Point {\n\t\treturn new Point(this.from.x + this.width, this.from.y + this.height);\n\t}\n\n\tpublic getLines(): Line[] {\n\t\tconst to = this.to;\n\n\t\tconst lines: Array<Line> = [\n\t\t\tnew Line(this.from, new Point(to.x, this.from.y)),\n\t\t\tnew Line(this.from, new Point(this.from.x, to.y)),\n\t\t\tnew Line(new Point(to.x, this.from.y), to),\n\t\t\tnew Line(new Point(this.from.x, to.y), to),\n\t\t];\n\t\treturn lines.filter((l) => l.valid);\n\t}\n\n\tpublic transform(matrix: Array<number>): this {\n\t\tconst p1 = Shape.applyTransform([this.from.x, this.from.y], matrix);\n\t\tconst p2 = Shape.applyTransform([this.from.x + this.width, this.from.y + this.height], matrix);\n\n\t\tconst x = Math.min(p1[0], p2[0]);\n\t\tconst y = Math.min(p1[1], p2[1]);\n\n\t\tconst width = Math.abs(p1[0] - p2[0]);\n\t\tconst height = Math.abs(p1[1] - p2[1]);\n\n\t\tthis.from = new Point(x, y);\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t}\n}\n","import type { ImageKind } from 'pdfjs-dist/legacy/build/pdf.mjs';\r\nimport type { InfoResult } from './InfoResult.js';\r\n\r\n/**\r\n * ImageKindKey\r\n * - Represents the keys of the ImageKind enum (e.g. \"GRAYSCALE_1BPP\", \"RGB_24BPP\", \"RGBA_32BPP\").\r\n */\r\nexport type ImageKindKey = keyof typeof ImageKind;\r\n\r\n/**\r\n * ImageKindValue\r\n * - Represents the numeric values of the ImageKind enum (e.g. 1, 2, 3).\r\n */\r\nexport type ImageKindValue = (typeof ImageKind)[ImageKindKey];\r\n\r\n/**\r\n * ImageResult\r\n * - Main result type for image extraction.\r\n * - Extends InfoResult and contains an array of PageImages.\r\n */\r\nexport interface ImageResult extends InfoResult {\r\n\tpages: PageImages[];\r\n\tgetPageImage(num: number, name: string): EmbeddedImage | null;\r\n}\r\n\r\n/**\r\n * PageImages\r\n * - Represents all embedded images found on a single PDF page.\r\n * - pageNumber: 1-based page index.\r\n * - images: Array of EmbeddedImage objects for this page.\r\n */\r\nexport interface PageImages {\r\n\tpageNumber: number;\r\n\timages: EmbeddedImage[];\r\n}\r\n\r\n/**\r\n * EmbeddedImage\r\n * - Normalized representation of an embedded image extracted from the PDF.\r\n * - `data`: Raw image bytes (e.g. PNG/JPEG) as Uint8Array. Use this for file writing or binary processing.\r\n * - `dataUrl`: Optional data URL (e.g. \"data:image/png;base64,...\") for directly embedding in <img> src.\r\n *   Storing both lets consumers choose the most convenient form; consider omitting one to save memory.\r\n * - `fileName`: Suggested filename or resource name for the image (used when saving to disk).\r\n * - `width` / `height`: Dimensions in pixels.\r\n * - `kind`: ImageKindValue from pdfjs-dist indicating the pixel format (e.g. GRAYSCALE_1BPP / RGB_24BPP / RGBA_32BPP).\r\n */\r\nexport interface EmbeddedImage {\r\n\t// Raw binary image data (PNG/JPEG) normalized to Uint8Array.\r\n\tdata: Uint8Array;\r\n\r\n\t// Optional base64 data URL for easy embedding in HTML.\r\n\tdataUrl: string;\r\n\r\n\t// Suggested filename or resource identifier for the image.\r\n\tfileName: string;\r\n\r\n\t// Image dimensions in pixels.\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\t// Color format as defined by pdfjs ImageKind numeric values.\r\n\tkind: ImageKindValue;\r\n}\r\n\r\nexport const ImageResultDefault: ImageResult = {\r\n\tgetPageImage(num: number, name: string): EmbeddedImage | null {\r\n\t\tfor (const pageData of this.pages) {\r\n\t\t\tif (pageData.pageNumber === num) {\r\n\t\t\t\tfor (const img of pageData.images) {\r\n\t\t\t\t\tif (img.fileName === name) {\r\n\t\t\t\t\t\treturn img;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\tpages: [],\r\n\ttotal: 0,\r\n\tinfo: undefined,\r\n\tmetadata: undefined,\r\n};\r\n","export type MinMax = [number, number, number, number];\r\n\r\nexport enum PathGeometry {\r\n\tundefined = 0,\r\n\thline = 1,\r\n\tvline = 2,\r\n\trectangle = 3,\r\n}\r\n\r\nexport enum DrawOPS {\r\n\tmoveTo = 0,\r\n\tlineTo = 1,\r\n\tcurveTo = 2,\r\n\tclosePath = 3,\r\n\trectangle = 4,\r\n}\r\n","import type { InfoResult } from './InfoResult.js';\r\n\r\nexport interface TextResult extends InfoResult {\r\n\tpages: Array<PageTextResult>;\r\n\ttext: string;\r\n\r\n\tgetPageText(num: number): string;\r\n}\r\n\r\ninterface PageTextResult {\r\n\tnum: number;\r\n\ttext: string;\r\n}\r\n\r\nexport const TextResultDefault: TextResult = {\r\n\tgetPageText(num: number): string {\r\n\t\tfor (const pageData of this.pages) {\r\n\t\t\tif (pageData.num === num) return pageData.text;\r\n\t\t}\r\n\t\treturn '';\r\n\t},\r\n\tpages: [],\r\n\ttotal: 0,\r\n\ttext: '',\r\n\tinfo: undefined,\r\n\tmetadata: undefined,\r\n};\r\n","//import workerUrl from 'pdfjs-dist/build/pdf.worker.min.mjs?url';\nimport type { PDFDocumentProxy, PDFPageProxy } from 'pdfjs-dist/legacy/build/pdf.mjs';\nimport * as pdfjs from 'pdfjs-dist/legacy/build/pdf.mjs';\nimport type { PDFObjects } from 'pdfjs-dist/types/src/display/pdf_objects.js';\nimport { Line, LineStore, Point, Rectangle } from './geometry/Geometry.js';\nimport type { TableData } from './geometry/TableData.js';\nimport { type ImageResult, ImageResultDefault, type PageImages } from './ImageResult.js';\nimport type { InfoResult } from './InfoResult.js';\nimport type { PageToImageResult } from './PageToImageResult.js';\nimport type { ParseOptions } from './ParseOptions.js';\nimport { type MinMax, PathGeometry } from './PathGeometry.js';\nimport type { PageTableResult, TableResult } from './TableResult.js';\nimport { type TextResult, TextResultDefault } from './TextResult.js';\n\n// biome-ignore lint/suspicious/noExplicitAny: <unsupported underline type>\nif (typeof (globalThis as any).pdfjs === 'undefined') {\n\t// biome-ignore lint/suspicious/noExplicitAny: <unsupported underline type>\n\t(globalThis as any).pdfjs = pdfjs;\n}\n\n// Only run in real browser environments\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n\t// biome-ignore lint/suspicious/noExplicitAny: <unsupported underline type>\n\tlet workerUrl: any;\n\n\tif (typeof require !== 'undefined') {\n\t\tworkerUrl = require('pdfjs-dist/build/pdf.worker.min.mjs');\n\n\t\tif (pdfjs?.GlobalWorkerOptions && !pdfjs.GlobalWorkerOptions.workerSrc) {\n\t\t\tpdfjs.GlobalWorkerOptions.workerSrc = workerUrl;\n\t\t}\n\t} else {\n\t\t// Use dynamic import in an IIFE for CommonJS compatibility\n\t\t(async () => {\n\t\t\tconst workerModule = await import('pdfjs-dist/build/pdf.worker.min.mjs?url');\n\t\t\tworkerUrl = workerModule.default || workerModule;\n\n\t\t\tif (pdfjs?.GlobalWorkerOptions && !pdfjs.GlobalWorkerOptions.workerSrc) {\n\t\t\t\tpdfjs.GlobalWorkerOptions.workerSrc = workerUrl;\n\t\t\t}\n\t\t})();\n\t}\n}\n\nexport class PDFParse {\n\tprivate readonly options: ParseOptions;\n\tprivate doc: PDFDocumentProxy | undefined;\n\n\tconstructor(options: ParseOptions) {\n\t\tif (typeof options.data === 'object' && 'buffer' in options.data) {\n\t\t\toptions.data = new Uint8Array(options.data);\n\t\t}\n\t\toptions.verbosity = pdfjs.VerbosityLevel.ERRORS;\n\t\tthis.options = options;\n\t}\n\n\tpublic async GetText(): Promise<TextResult> {\n\t\tconst result: TextResult = { ...TextResultDefault };\n\n\t\tconst infoData = await this.load();\n\t\tObject.assign(result, infoData);\n\n\t\tif (this.doc === undefined) {\n\t\t\tthrow new Error('PDF document not loaded');\n\t\t}\n\n\t\tfor (let i: number = 1; i <= result.total; i++) {\n\t\t\tif (this.shouldParse(i, result.total)) {\n\t\t\t\tconst pageProxy = await this.doc.getPage(i);\n\t\t\t\tconst text = await this.getPageText(pageProxy);\n\t\t\t\tresult.pages.push({\n\t\t\t\t\ttext: text,\n\t\t\t\t\tnum: i,\n\t\t\t\t});\n\t\t\t\tpageProxy.cleanup();\n\t\t\t}\n\t\t}\n\n\t\tawait this.doc.destroy();\n\t\tthis.doc = undefined;\n\n\t\tfor (const page of result.pages) {\n\t\t\tresult.text += `${page.text}\\n\\n`;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async load(): Promise<InfoResult> {\n\t\tconst opts = { ...this.options };\n\n\t\tif (this.options.data instanceof Uint8Array) {\n\t\t\topts.data = new Uint8Array(this.options.data);\n\t\t}\n\n\t\tconst loadingTask = pdfjs.getDocument(opts);\n\n\t\tthis.doc = await loadingTask.promise;\n\t\tconst data = await this.doc.getMetadata();\n\n\t\treturn {\n\t\t\ttotal: this.doc.numPages,\n\t\t\tinfo: data.info,\n\t\t\tmetadata: data.metadata,\n\t\t};\n\t}\n\n\tprivate shouldParse(currentPage: number, totalPage: number): boolean {\n\t\tlet parseFlag = false;\n\n\t\tif (this.options.partial) {\n\t\t\tif (this.options.first && currentPage <= this.options.first) {\n\t\t\t\tparseFlag = true;\n\t\t\t}\n\n\t\t\tif (!parseFlag) {\n\t\t\t\tif (this.options.last && currentPage > totalPage - this.options.last) {\n\t\t\t\t\tparseFlag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tparseFlag = true;\n\t\t}\n\n\t\treturn parseFlag;\n\t}\n\n\tprivate async getPageText(page: PDFPageProxy): Promise<string> {\n\t\tconst textContent = await page.getTextContent({\n\t\t\tincludeMarkedContent: false,\n\t\t\tdisableNormalization: false,\n\t\t});\n\n\t\tconst strBuf: Array<string> = [];\n\n\t\tfor (const item of textContent.items) {\n\t\t\tif (!('str' in item)) continue;\n\t\t\tstrBuf.push(item.str);\n\t\t\tif (item.hasEOL) {\n\t\t\t\tstrBuf.push('\\n');\n\t\t\t}\n\t\t}\n\n\t\treturn strBuf.join('');\n\t}\n\n\tpublic async GetImage(): Promise<ImageResult> {\n\t\tconst result: ImageResult = { ...ImageResultDefault };\n\n\t\tconst infoData = await this.load();\n\t\tObject.assign(result, infoData);\n\n\t\tif (this.doc === undefined) {\n\t\t\tthrow new Error('PDF document not loaded');\n\t\t}\n\n\t\tfor (let i: number = 1; i <= result.total; i++) {\n\t\t\tif (this.shouldParse(i, result.total)) {\n\t\t\t\tconst page = await this.doc.getPage(i);\n\t\t\t\tconst ops = await page.getOperatorList();\n\n\t\t\t\tconst pageImages: PageImages = { pageNumber: i, images: [] };\n\t\t\t\tresult.pages.push(pageImages);\n\n\t\t\t\tfor (let j = 0; j < ops.fnArray.length; j++) {\n\t\t\t\t\tif (ops.fnArray[j] === pdfjs.OPS.paintInlineImageXObject || ops.fnArray[j] === pdfjs.OPS.paintImageXObject) {\n\t\t\t\t\t\tconst name = ops.argsArray[j][0];\n\t\t\t\t\t\tconst isCommon = page.commonObjs.has(name);\n\t\t\t\t\t\tconst imgPromise = isCommon ? this.resolveEmbeddedImage(page.commonObjs, name) : this.resolveEmbeddedImage(page.objs, name);\n\n\t\t\t\t\t\tconst { width, height, kind, data } = await imgPromise;\n\n\t\t\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <underlying library does not contain valid typedefs>\n\t\t\t\t\t\tconst canvasFactory = (this.doc as any).canvasFactory;\n\n\t\t\t\t\t\tconst canvasAndContext = canvasFactory.create(width, height);\n\t\t\t\t\t\tconst context = canvasAndContext.context;\n\t\t\t\t\t\tlet imgData = null;\n\t\t\t\t\t\tif (kind === pdfjs.ImageKind.RGBA_32BPP) {\n\t\t\t\t\t\t\timgData = context.createImageData(width, height);\n\t\t\t\t\t\t\timgData.data.set(data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\timgData = context.createImageData(width, height);\n\t\t\t\t\t\t\tthis.convertToRGBA({\n\t\t\t\t\t\t\t\tsrc: data,\n\t\t\t\t\t\t\t\tdest: new Uint32Array(imgData.data.buffer),\n\t\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontext.putImageData(imgData, 0, 0);\n\t\t\t\t\t\tconst buff = canvasAndContext.canvas.toBuffer('image/png');\n\n\t\t\t\t\t\tconst base64 = buff.toString('base64');\n\t\t\t\t\t\tconst dataUrl = `data:image/png;base64,${base64}`;\n\n\t\t\t\t\t\tpageImages.images.push({\n\t\t\t\t\t\t\tdata: buff,\n\t\t\t\t\t\t\tdataUrl,\n\t\t\t\t\t\t\tfileName: name,\n\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this.doc.destroy();\n\t\tthis.doc = undefined;\n\n\t\treturn result;\n\t}\n\n\tprivate convertToRGBA({ src, dest, width, height, kind }: { src: Uint8Array; dest: Uint32Array; width: number; height: number; kind: number }) {\n\t\tif (kind === pdfjs.ImageKind.RGB_24BPP) {\n\t\t\tfor (let i = 0, j = 0; i < src.length; i += 3, j++) {\n\t\t\t\tconst r = src[i];\n\t\t\t\tconst g = src[i + 1];\n\t\t\t\tconst b = src[i + 2];\n\t\t\t\tdest[j] = (255 << 24) | (b << 16) | (g << 8) | r;\n\t\t\t}\n\t\t} else if (kind === pdfjs.ImageKind.GRAYSCALE_1BPP) {\n\t\t\t// Her bit bir pikseli temsil eder (0: siyah, 1: beyaz)\n\t\t\tlet pixelIndex = 0;\n\t\t\tfor (let i = 0; i < src.length; i++) {\n\t\t\t\tconst byte = src[i];\n\t\t\t\tfor (let bit = 7; bit >= 0; bit--) {\n\t\t\t\t\tif (pixelIndex >= width * height) break;\n\t\t\t\t\tconst isWhite = ((byte >> bit) & 1) === 1;\n\t\t\t\t\tconst gray = isWhite ? 255 : 0;\n\t\t\t\t\tdest[pixelIndex++] = (255 << 24) | (gray << 16) | (gray << 8) | gray;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`convertToRGBA: Unsupported image kind: ${kind}`);\n\t\t}\n\t}\n\n\tprivate resolveEmbeddedImage(pdfObjects: PDFObjects, name: string): Promise<{ width: number; height: number; kind: number; data: Uint8Array }> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <underlying library does not contain valid typedefs>\n\t\t\t(pdfObjects as any).get(name, (imgData: any) => {\n\t\t\t\tif (imgData) {\n\t\t\t\t\tconst dataBuff = new Uint8Array(imgData.data);\n\t\t\t\t\tresolve({ width: imgData.width, height: imgData.height, kind: imgData.kind, data: dataBuff });\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error(`Image object ${name} not found`));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async PageToImage(): Promise<PageToImageResult> {\n\t\tconst result: PageToImageResult = { pages: [], total: 0 } as PageToImageResult;\n\n\t\t//const base = new URL('../../node_modules/pdfjs-dist/', import.meta.url);\n\t\t//this.options.cMapUrl = new URL('cmaps/', base).href;\n\t\t//this.options.cMapPacked = true;\n\t\t//this.options.standardFontDataUrl = new URL('legacy/build/standard_fonts/', base).href;\n\n\t\tconst infoData = await this.load();\n\t\tObject.assign(result, infoData);\n\n\t\tif (this.doc === undefined) {\n\t\t\tthrow new Error('PDF document not loaded');\n\t\t}\n\n\t\tfor (let i: number = 1; i <= result.total; i++) {\n\t\t\tif (this.shouldParse(i, result.total)) {\n\t\t\t\t//const pageToImages: PageToImage = { pageNumber: i };\n\t\t\t\t//result.pages.push(pageToImages);\n\n\t\t\t\tconst page = await this.doc.getPage(i);\n\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <underlying library does not contain valid typedefs>\n\t\t\t\tconst canvasFactory = (this.doc as any).canvasFactory;\n\t\t\t\tconst viewport = page.getViewport({ scale: 1.0 });\n\t\t\t\tconst canvasAndContext = canvasFactory.create(viewport.width, viewport.height);\n\t\t\t\tconst renderContext = {\n\t\t\t\t\tcanvasContext: canvasAndContext.context,\n\t\t\t\t\tviewport,\n\t\t\t\t\tcanvas: canvasAndContext.canvas,\n\t\t\t\t};\n\n\t\t\t\tconst renderTask = page.render(renderContext);\n\t\t\t\tawait renderTask.promise;\n\t\t\t\t// Convert the canvas to an image buffer.\n\t\t\t\tconst data = canvasAndContext.canvas.toBuffer('image/png');\n\t\t\t\tconst base64 = data.toString('base64');\n\t\t\t\tconst dataUrl = `data:image/png;base64,${base64}`;\n\n\t\t\t\tresult.pages.push({\n\t\t\t\t\tdata,\n\t\t\t\t\tdataUrl,\n\t\t\t\t\tpageNumber: i,\n\t\t\t\t});\n\n\t\t\t\tpage.cleanup();\n\t\t\t}\n\t\t}\n\n\t\tawait this.doc.destroy();\n\t\tthis.doc = undefined;\n\n\t\treturn result;\n\t}\n\n\tpublic async GetTable(): Promise<TableResult> {\n\t\tconst infoData = await this.load();\n\t\tconst result: TableResult = { ...infoData, pages: [], mergedTables: [] };\n\n\t\tif (this.doc === undefined) {\n\t\t\tthrow new Error('PDF document not loaded');\n\t\t}\n\n\t\tfor (let i: number = 1; i <= result.total; i++) {\n\t\t\tif (this.shouldParse(i, result.total)) {\n\t\t\t\tconst page = await this.doc.getPage(i);\n\t\t\t\tconst viewport = page.getViewport({ scale: 1 });\n\n\t\t\t\t//viewport.convertToViewportPoint(0, 0);\n\n\t\t\t\tconst store = await this.getPageTables(page);\n\n\t\t\t\t//const store = await this.getPageGeometry(page);\n\n\t\t\t\tstore.normalize();\n\n\t\t\t\tconst tableDataArr = store.getTableData();\n\t\t\t\tawait this.fillPageTables(page, tableDataArr);\n\n\t\t\t\tfor (const table of tableDataArr) {\n\t\t\t\t\t//if (table.cellCount < 3) continue\n\t\t\t\t\tconst pageTableResult: PageTableResult = { num: i, tables: table.toArray() };\n\t\t\t\t\tresult.pages.push(pageTableResult);\n\t\t\t\t\t//pageTableResult.tables.push(table.toData())\n\t\t\t\t}\n\n\t\t\t\tpage.cleanup();\n\t\t\t}\n\t\t}\n\n\t\t// for (const table of Table.AllTables) {\n\t\t//     if (table.cellCount < 3) continue\n\t\t//     const str = table.toString()\n\t\t//     console.log(str)\n\t\t// }\n\t\tawait this.doc.destroy();\n\t\treturn result;\n\t}\n\n\tprivate getPathGeometry(mm: MinMax): PathGeometry {\n\t\tconst width = mm[2] - mm[0];\n\t\tconst height = mm[3] - mm[1];\n\n\t\tif (mm[0] === Infinity) {\n\t\t\treturn PathGeometry.undefined;\n\t\t}\n\n\t\tif (width > 5 && height > 5) {\n\t\t\treturn PathGeometry.rectangle;\n\t\t} else if (width > 5 && height === 0) {\n\t\t\treturn PathGeometry.hline;\n\t\t} else if (width === 0 && height > 5) {\n\t\t\treturn PathGeometry.vline;\n\t\t}\n\n\t\treturn PathGeometry.undefined;\n\t}\n\n\tprivate async getPageTables(page: PDFPageProxy): Promise<LineStore> {\n\t\tconst lineStore: LineStore = new LineStore();\n\t\tconst viewport = page.getViewport({ scale: 1 });\n\t\tlet transformMatrix = [1, 0, 0, 1, 0, 0];\n\t\tconst transformStack: Array<Array<number>> = [];\n\n\t\tconst opList = await page.getOperatorList();\n\n\t\tfor (let i = 0; i < opList.fnArray.length; i++) {\n\t\t\tconst fn = opList.fnArray[i];\n\t\t\tconst args = opList.argsArray[i];\n\t\t\tconst op = args?.[0] ?? 0;\n\t\t\tconst mm = args?.[2] ?? [Infinity, Infinity, -Infinity, -Infinity];\n\t\t\t//const minMax = new Float32Array([Infinity, Infinity, -Infinity, -Infinity]);\n\n\t\t\tif (fn === pdfjs.OPS.constructPath) {\n\t\t\t\tif (op === pdfjs.OPS.fill) {\n\t\t\t\t\t//debugger;\n\t\t\t\t}\n\t\t\t\tif (op !== pdfjs.OPS.stroke) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst pg = this.getPathGeometry(mm);\n\t\t\t\tif (pg === PathGeometry.rectangle) {\n\t\t\t\t\tconst rect = new Rectangle(new Point(mm[0], mm[1]), mm[2] - mm[0], mm[3] - mm[1]);\n\t\t\t\t\trect.transform(transformMatrix);\n\t\t\t\t\trect.transform(viewport.transform);\n\t\t\t\t\tlineStore.addRectangle(rect);\n\t\t\t\t} else if (pg === PathGeometry.hline || pg === PathGeometry.vline) {\n\t\t\t\t\tconst from = new Point(mm[0], mm[1]);\n\t\t\t\t\tconst to = new Point(mm[2], mm[3]);\n\t\t\t\t\tconst line = new Line(from, to);\n\t\t\t\t\tline.transform(transformMatrix);\n\t\t\t\t\tline.transform(viewport.transform);\n\t\t\t\t\tlineStore.add(line);\n\t\t\t\t} else {\n\t\t\t\t\tdebugger;\n\t\t\t\t}\n\n\t\t\t\t// if (op === pdfjs.OPS.rectangle) {\n\t\t\t\t// \tdebugger;\n\t\t\t\t// } else if (op === pdfjs.OPS.moveTo) {\n\t\t\t\t// \tdebugger;\n\t\t\t\t// } else if (op === pdfjs.OPS.lineTo) {\n\t\t\t\t// \tdebugger;\n\t\t\t\t// } else if (op === pdfjs.OPS.endPath) {\n\t\t\t\t// \tconst combinedMatrix = pdfjs.Util.transform(viewport.transform, transformMatrix);\n\n\t\t\t\t// \t// while (args[1].length) {\n\t\t\t\t// \t// \tconst drawOp = args[1].shift();\n\t\t\t\t// \t// \tdebugger;\n\t\t\t\t// \t// }\n\t\t\t\t// } else {\n\t\t\t\t// \t//debugger;\n\t\t\t\t// }\n\t\t\t} else if (fn === pdfjs.OPS.setLineWidth) {\n\t\t\t\tdebugger;\n\t\t\t} else if (fn === pdfjs.OPS.save) {\n\t\t\t\ttransformStack.push(transformMatrix);\n\t\t\t} else if (fn === pdfjs.OPS.restore) {\n\t\t\t\tconst restoredMatrix = transformStack.pop();\n\t\t\t\tif (restoredMatrix) {\n\t\t\t\t\ttransformMatrix = restoredMatrix;\n\t\t\t\t}\n\t\t\t} else if (fn === pdfjs.OPS.transform) {\n\t\t\t\t//transformMatrix = this.transform_fn(transformMatrix, args);\n\t\t\t\ttransformMatrix = pdfjs.Util.transform(transformMatrix, args);\n\t\t\t}\n\t\t}\n\n\t\treturn lineStore;\n\t}\n\n\tprivate async getPageGeometry(page: PDFPageProxy): Promise<LineStore> {\n\t\tconst lineStore: LineStore = new LineStore();\n\t\tconst opList = await page.getOperatorList();\n\n\t\tconst viewport = page.getViewport({ scale: 1 });\n\n\t\tlet transformMatrix = [1, 0, 0, 1, 0, 0];\n\t\tconst transformStack: Array<Array<number>> = [];\n\n\t\tlet current_x: number = 0;\n\t\tlet current_y: number = 0;\n\n\t\tfor (let j = 0; j < opList.fnArray.length; j++) {\n\t\t\tconst fn = opList.fnArray[j];\n\t\t\tconst args = opList.argsArray[j];\n\n\t\t\tif (fn === pdfjs.OPS.constructPath) {\n\t\t\t\twhile (args[0].length) {\n\t\t\t\t\tconst op = args[0].shift();\n\n\t\t\t\t\tconst combinedMatrix = pdfjs.Util.transform(viewport.transform, transformMatrix);\n\n\t\t\t\t\tif (op === pdfjs.OPS.rectangle) {\n\t\t\t\t\t\tconst x = args[1].shift();\n\t\t\t\t\t\tconst y = args[1].shift();\n\t\t\t\t\t\tconst width = args[1].shift();\n\t\t\t\t\t\tconst height = args[1].shift();\n\n\t\t\t\t\t\tif (Math.min(width, height) <= 2) {\n\t\t\t\t\t\t\t// TODO remove\n\t\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst rect = new Rectangle(new Point(x, y), width, height);\n\t\t\t\t\t\trect.transform(combinedMatrix);\n\t\t\t\t\t\t//rect.transform(viewport.transform);\n\n\t\t\t\t\t\tlineStore.addRectangle(rect);\n\t\t\t\t\t} else if (op === pdfjs.OPS.moveTo) {\n\t\t\t\t\t\tcurrent_x = args[1].shift();\n\t\t\t\t\t\tcurrent_y = args[1].shift();\n\t\t\t\t\t} else if (op === pdfjs.OPS.lineTo) {\n\t\t\t\t\t\tconst x = args[1].shift();\n\t\t\t\t\t\tconst y = args[1].shift();\n\n\t\t\t\t\t\t//default trasform\n\t\t\t\t\t\tconst from = new Point(current_x, current_y);\n\t\t\t\t\t\tconst to = new Point(x, y);\n\t\t\t\t\t\tconst line = new Line(from, to);\n\t\t\t\t\t\tline.transform(combinedMatrix);\n\t\t\t\t\t\t//line.transform(viewport.transform);\n\n\t\t\t\t\t\t// // viewport transform\n\t\t\t\t\t\t// const _from = viewport.convertToViewportPoint(line.from.x, line.from.y)\n\t\t\t\t\t\t// const _to = viewport.convertToViewportPoint(line.to.x, line.to.y)\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// const transformedLine = new Line(new Point(_from[0], _from[1]), new Point(_to[0], _to[1]))\n\t\t\t\t\t\tlineStore.add(line);\n\n\t\t\t\t\t\tcurrent_x = x;\n\t\t\t\t\t\tcurrent_y = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (fn === pdfjs.OPS.save) {\n\t\t\t\ttransformStack.push(transformMatrix);\n\t\t\t} else if (fn === pdfjs.OPS.restore) {\n\t\t\t\tconst restoredMatrix = transformStack.pop();\n\t\t\t\tif (restoredMatrix) {\n\t\t\t\t\ttransformMatrix = restoredMatrix;\n\t\t\t\t}\n\t\t\t} else if (fn === pdfjs.OPS.transform) {\n\t\t\t\t//transformMatrix = this.transform_fn(transformMatrix, args);\n\t\t\t\ttransformMatrix = pdfjs.Util.transform(transformMatrix, args);\n\t\t\t}\n\t\t}\n\n\t\treturn lineStore;\n\t}\n\n\tprivate async fillPageTables(page: PDFPageProxy, pageTables: Array<TableData>): Promise<void> {\n\t\t//const resultTable: Array<Table> = []\n\n\t\tconst viewport = page.getViewport({ scale: 1 });\n\n\t\t// for (let i = 0; i < pageTables.length; i++) {\n\t\t//     const currentTable = pageTables[i]\n\t\t// }\n\n\t\t//pageTables = pageTables.filter((table) => table.cellCount > 3)\n\n\t\tconst textContent = await page.getTextContent({\n\t\t\tincludeMarkedContent: false,\n\t\t\tdisableNormalization: false,\n\t\t});\n\n\t\tfor (const textItem of textContent.items) {\n\t\t\tif (!('str' in textItem)) continue;\n\n\t\t\tconst tx = pdfjs.Util.transform(pdfjs.Util.transform(viewport.transform, textItem.transform), [1, 0, 0, -1, 0, 0]);\n\n\t\t\t//const resXY = viewport.convertToViewportPoint(tx[4], tx[5]);\n\n\t\t\t// textItem.transform = pdfjs.Util.transform(viewport.transform, textItem.transform)\n\t\t\t// textItem.transform[5] = viewport.height - textItem.transform[5] - textItem.height\n\n\t\t\tfor (const pageTable of pageTables) {\n\t\t\t\tconst cell = pageTable.findCell(tx[4], tx[5]);\n\t\t\t\tif (cell) {\n\t\t\t\t\tcell.text.push(textItem.str);\n\t\t\t\t\tif (textItem.hasEOL) {\n\t\t\t\t\t\tcell.text.push('\\n');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Table.tryAddText(pageTables, textItem)\n\t\t}\n\t}\n}\n","import { PDFParse } from './PDFParse.js';\r\n\r\nexport type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;\r\n/**\r\n * The URL of the PDF.\r\n * -\r\n * Binary PDF data.\r\n * Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\r\n * BASE64-encoded, use `atob()` to convert it to a binary string first.\r\n *\r\n * NOTE: If TypedArrays are used they will generally be transferred to the\r\n * worker-thread. This will help reduce main-thread memory usage, however\r\n * it will take ownership of the TypedArrays.\r\n */\r\n\r\nexport async function pdf(data: string | URL | number[] | ArrayBuffer | TypedArray) {\r\n\tlet parser: PDFParse;\r\n\tif (data instanceof URL) {\r\n\t\tparser = new PDFParse({ url: data });\r\n\t} else {\r\n\t\tparser = new PDFParse({ data });\r\n\t}\r\n\r\n\tconst text = await parser.GetText();\r\n\treturn text;\r\n}\r\n\r\nexport { PDFParse };\r\n"],"names":["LineDirection","PathGeometry","pdfjs"],"mappings":"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"}